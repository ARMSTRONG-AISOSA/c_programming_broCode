
||
||
||
Index 1.0
Adding colors to your terminal output in C is typically done using ANSI escape codes. These are special sequences of characters that the terminal interprets to change text attributes like color, style (bold, underline), etc.

How ANSI Escape Codes for Colors Work:

ANSI escape codes usually start with the escape character \033 (or \x1b) followed by [ and then a series of parameters separated by semicolons, ending with a letter that specifies the action. For colors, we primarily use the Select Graphic Rendition (SGR) codes.

Syntax: 
    \033[<SGR parameter>m

ðŸŽ¨ Color Code Quick Reference
\*Color*\	        \*Code*\
Black	            \033[30m
Red	                \033[31m
Green	            \033[32m
Yellow	            \033[33m
Blue	            \033[34m
Magenta	            \033[35m
Cyan	            \033[36m
White	            \033[37m

\*Bg-Color*\	        \*Code*\
Black-bg                \33[40m
Red-bg                  \33[41m
Green-bg                \33[42m
Yellow-bg               \33[43m
Blue-bg                 \33[44m
Magenta-bg              \33[45m
Cyan-bg                 \33[46m
White-bg                \33[47m

Other useful SGR codes Quick Reference
\*Action*\	        \*Code*\
Reset	            \033[0m
Bold	            \033[1m
Faint	            \033[2m
Italic	            \033[3m
Underline	        \033[4m
Inverse Video       \033[7m
Crossed-out	        \033[9m


ex code:
    int main() {
        printf("\033[32mHello\033[0m\n");
        return 0;
    }

i-1.5
Combining Colors and Styles:
You can combine multiple SGR parameters by separating them with semicolons:
To print "Warning!" in bold yellow on a red background.
code:
    int main() {
        printf("\033[1;33;41mWarning!\033[0m\n");
        return 0;
    }

Breakdown:
    -\033[ ~~starts the escape sequence.
    -1 ~~sets bold.
    -33 ~~sets the foreground color to yellow.
    -41 ~~sets the background color to red.
    -m ~~ends the SGR sequence.
    -Warning! ~~is the text.
    -\033[0m ~~resets everything.

||
||
||
Index 2.0
More Modern (256-Color) Support:

Some terminals support a wider range of 256 colors. You can use the following formats:

Foreground (256 colors): \033[38;5;<color_code>m (where <color_code> is a number from 0 to 255)
Background (256 colors): \033[48;5;<color_code>m

True Color (16 Million Colors):

Even more advanced terminals support "true color" using RGB values:

Foreground (True Color): \033[38;2;<r>;<g>;<b>m (where <r>, <g>, <b> are RGB values from 0 to 255)
Background (True Color): \033[48;2;<r>;<g>;<b>m

Example of 256 colors:
code:
    int main() {
        printf("\033[38;5;46mThis is a 256-color foreground.\033[0m\n");
        printf("\033[48;5;104mThis has a 256-color background.\033[0m\n");
        return 0;
    }

Example of True Color:
code:
    int main() {
        printf("\033[38;2;255;105;180mThis is a true color foreground (pink).\033[0m\n");
        printf("\033[48;2;0;128;0mThis has a true color background (green).\033[0m\n");
        return 0;
    }

Important Considerations:
    --Terminal Support: Not all terminals fully support ANSI escape codes, especially older or very basic ones. True color support is even more recent. Your code might display strange characters on unsupported terminals.
    --Portability: Relying heavily on specific ANSI escape codes can make your program less portable across different terminal emulators and operating systems.