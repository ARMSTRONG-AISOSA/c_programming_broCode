*==== Compile C ====*
The C programming language do not support classes and objects.
ps: C++ doesn
To comile the C file via terminal 
-cd into the folder and run
gcc 'filename' in the commandline
    --> gcc HelloWorld.c

To name the file yourself --> gcc HelloWorld.c -o helloWorld

To define the file & type --> gcc HelloWorld.c -o helloWorld(.exe/.out)

To run compiled file --> helloWorld.exe-- (linux)./helloWorld.exe

To run c in the terminal of vscode instead of the output, install "code runner", search for in settings and tick good to "run in terminal"
This is done because output doesn't accept user input.

*==== Compile C Multiple Files ====*
// How to run the multicode
// gcc name1.c name2.c -o fileName
// ./fileNmae

// If the files are in folders, for example:
// gcc src/name1.c src/name2.c -Iinclude -o fileName
// -"Iinclude" tells the compiler to look in the include/ folder for headers.


*==== Math Functions in linux ====*
On Linux systems, mathematical functions like sqrt() are stored in a separate library called libm (the math library). Unlike some other operating systems, Linux doesn't automatically link this library when you compile programs.

When you call gcc without the -lm flag on any Linux system, the compiler can compile your code, but the linker can't find the implementation for sqrt() and similar math functions.

#Solution 1

The solution is the same regardless of which Linux distribution you're using - you need to explicitly tell the linker to include the math library by adding -lm to your compile command:
    Code:
    bashgcc test.c -o test -lm

#Solution 2
To implement the -lm flag in Code Runner (assuming you're using Visual Studio Code with the Code Runner extension), you need to modify the extension's settings. 

    -Open VS Code
    -Go to File > Preferences > Settings (or press Ctrl+,)
    -Search for "code-runner.executorMap"
    -Click on "Edit in settings.json"
    -Find the entry for "c" in the executorMap and modify it to include the "-lm" flag

Here's what the modification should look like:
    code:
    json"code-runner.executorMap": {
        "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt -lm && $dir$fileNameWithoutExt"
    }

If you have other languages configured, make sure to keep those configurations and only modify the "c" entry.
After saving these changes, Code Runner will automatically include the -lm flag when compiling and running your C programs that use math functions.
This change will affect all C programs you run with Code Runner, which is generally what you want since it's harmless to include the math library even when you're not using it.




*==== Custom String Extensions ====*

Functions like strlwr(), strupr(), and others (like itoa(), strrev()) are not part of the standard C library â€” especially on POSIX-compliant systems like Linux. They are available in non-standard or platform-specific libraries (like Microsoft's <string.h> extensions on Windows), but Linux does not include them by default.

On Linux, you shouldn't rely on non-standard functions like strlwr() unless you're writing platform-specific code. Always prefer writing small, portable equivalents.

The most reliable way is to Manually implement them

ps:char* strlwr(char* str) { }
    Declares a function strlwr that takes a pointer to a char (i.e., a string) and returns a pointer to a char (the same string).

    
 

*==== ðŸ§© malloc() â€” Memory Allocation ====*
malloc() (short for memory allocation) is used to dynamically allocate memory at runtime.
Syntax:
    void *malloc(size_t size);
-It allocates size bytes of memory and returns a pointer to the beginning of the block.
-If memory allocation fails, it returns NULL.

Example Code:
    int *arr = (int*)malloc(5 * sizeof(int));  // Allocates memory for 5 integers
-5 * sizeof(int) calculates the total bytes needed.
-(int*) casts the returned void* to an int*(data type) so it can be used properly.





*==== ðŸš® free() â€” Free Allocated Memory ====*

free() deallocates (frees) memory previously allocated with malloc(), calloc(), or realloc().
Syntax:
    void free(void *ptr);
-It takes the pointer to the previously allocated memory and returns it (the memory back) to the system.
-After calling free(), that memory should not be used again unless reallocated.
example code:
    free(arr);  // Frees the memory block previously allocated
-Always use free() for every successful malloc() to prevent memory leaks.
-Don't free() a pointer twice.
-Donâ€™t use memory after itâ€™s been freed (this is called dangling pointer access).



*==== General Naming Rules in C ====*
Element Type	        Convention	                        Example
Variables	            Lowercase words, snake_case	        total_sum, user_age
Constants / Macros	    ALL_CAPS, underscores	            MAX_LENGTH, PI_VALUE
Functions	            snake_case or camelCase	            print_message(), addUser()
Structs	                Capitalized or PascalCase	        struct Person, struct CarInfo
Enum types	            PascalCase for enum name,	        enum UserRole { ADMIN, USER }
                        CAPS for values
Pointers	            Use p prefix or _ptr suffix	        pNode, data_ptr
Global variables	    Prefix with g_ or all lowercase	    g_count, global_flag
Static variables	    Prefix with s_	                    s_temp_value


*What to Avoid
    -Avoid overly short names like x, y (unless in loops).
    -Avoid camelCase for macros/constants (use UPPER_CASE instead).
    -Don't mix naming styles inconsistently in one project.

*Best Practices
Be descriptive but concise:
code:
    int count; // good  
    int c;     // too vague  

Use nouns for variables, verbs for functions:
code:
    int user_age;
    void print_report();

Use prefixes/suffixes when needed for clarity:
code:
    int* user_ptr; // or pUser
Stick to one convention throughout your project (e.g., snake_case for all variables and functions).